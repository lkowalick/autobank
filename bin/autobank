#!/usr/bin/env ruby

require 'rubygems'
require 'mechanize'
require 'yaml'
require 'autobank'
                
#Below is the file that ledger will read, along with the file containing the 
#username and password for login to the Chase website. If these files don't
#exist, the programs exits and reports an error
unless File.file?(ENV['LEDGER_FILE'])
  puts "Need environment variable $LEDGER_FILE to be an actual file"
  exit 1
else
  Ledgerfile = ENV['LEDGER_FILE']
end

has_bank_info = File.file?(ENV['BANK_INFO'])
if has_bank_info
  BankInfo = ENV['BANK_INFO'] if has_bank_info
  chase_info = YAML::load( File.open(BankInfo))["chase"]
end

###########################################################
# Navigate to Chase Account Information Page
###########################################################

agent = Mechanize.new
agent.user_agent_alias = 'Mac Safari'
#Get the Chase mobile sign in page, enter my username, password, and submit the form

agent.get('https://mobilebanking.chase.com/Public/Home/LogOnJp')

if has_bank_info
  username = chase_info["username"]
  password = chase_info["password"]
else
  puts "What is your username?"
  username = gets
  puts "What is your password?"
  password = gets
end

form = agent.page.forms[0]
form.auth_userId = username
form.auth_passwd = password
agent.submit(form)
page = Nokogiri::HTML(agent.page.body)
# We must verify the mechanize browser
if page.css("a").any? { |elt| elt.text =~ /Identification\ Code/ }
  agent.page.forms.first.submit
  agent.click(/.+\@.+/)
  puts "** A one-time verification is needed **"
  puts "A one time passcode was sent to your email"
  print "Please enter the code: "
  otp = gets
  form = agent.page.forms.first
  form.auth_passwd = password
  form.auth_otp = otp
  form.submit
end

puts "Going to Account Page"
agent.click(/CHASE CHECKING/)

page = Nokogiri::HTML(agent.page.body)

# The relevant data is in <td> tags, where the first is garbage, and only the
# 2nd, 4th, and 6th entries contain relevant data
raw_transactions = page.css("td").map(&:text)

raw_transactions.delete_at(-1)

transactions = []
raw_transactions.each_slice(8) do |s| 
  new_trans = Autobank::Transaction.new(s[3], s[1], s[5])
  transactions << new_trans
end

transactions.delete_if do |trans|
  trans.date == "Pending"
end


#For each transaction taken from the webpage, we check to see if it is in
#the ledger file. We discard it if it already in the ledger file.
#
file_text = File.read(Ledgerfile)
transactions.keep_if do |trans|
  file_text.index(trans.date + "\t" + trans.payee).nil?
end

if transactions.empty?
  puts "No transactions updated"
  exit 0
end

puts "Writing transactions to #{Ledgerfile}"
file = File::open(Ledgerfile, "a")

transactions.reverse.each do |trans|
  file.puts trans
end
